{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","autoFocus","placeholder","Tasks","tasks","hiding","map","name","id","done","key","Buttons","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAUeA,G,UAPF,kBACT,0BAAMC,UAAU,QACZ,2BAAOA,UAAU,cAAcC,WAAS,EAACC,YAAY,0BACrD,4BAAQF,UAAU,gBAAlB,oBCaOG,G,MAhBD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,OAAT,OACV,wBAAIL,UAAU,aACTI,EAAME,KAAI,gBAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KAAZ,OACP,wBAAIC,IAAKF,EACLR,UAAS,yBAAoBK,GAAUI,EAAO,2BAA6B,KAE3E,4BAAQT,UAAS,4BAAuBS,EAAO,GAAK,+BACpD,0BAAMT,UAAS,0BAAqBS,EAAO,GAAK,4BAC3CF,GAEL,4BAAQP,UAAU,6DCMnBW,G,MAhBC,SAAC,GAAD,IAAGP,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OACZ,yBAAKL,UAAU,4BACVI,EAAMQ,OAAS,GACZ,oCACI,4BAAQZ,UAAS,yBAAoBI,EAAMQ,OAAS,EAAI,GAAK,uBACxDP,EAAS,4BAAoB,wBAElC,4BAAQQ,SAAUT,EAAMU,OAAM,qBAAGL,QAAkBT,UAAS,yBAAoBI,EAAMQ,OAAS,EAAI,GAAK,uBAAxG,6BCGDG,G,MAVC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMC,EAAf,EAAeA,mBAAf,OAChB,yBAAKlB,UAAU,WACP,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,eAAegB,GAC5BE,GAEFD,KCHME,EAJA,SAAC,GAAD,IAAEH,EAAF,EAAEA,MAAF,OACX,wBAAIhB,UAAU,UAAUgB,ICObI,G,MAPG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,0BAAMrB,UAAU,aACXqB,KCGHjB,EAAQ,CACZ,CAAEI,GAAI,EAAGD,KAAM,IAAKE,MAAM,GAC1B,CAAED,GAAI,EAAGD,KAAM,IAAKE,MAAM,IAuBba,MAlBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQN,MAAM,qBACd,kBAAC,EAAD,CACAA,MAAM,qBACNC,KAAM,kBAAC,EAAD,QAGN,kBAAC,EAAD,CACAD,MAAM,mBACNC,KAAM,kBAAC,EAAD,CAAOb,MAAOA,EAAOC,QAblB,IAcTa,mBAAoB,kBAAC,EAAD,CAASd,MAAOA,EAAOC,QAdlC,QCDKkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.448de6db.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Form = () => (\r\n    <form className=\"form\">\r\n        <input className=\"form__input\" autoFocus placeholder=\"Co jest do zrobienia?\" />\r\n        <button className=\"form__button\">Dodaj zadanie</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Tasks = ({tasks, hiding}) => (\r\n    <ul className=\"tasksList\">\r\n        {tasks.map(({name, id, done}) => (\r\n            <li key={id}\r\n                className={`tasksList__item${hiding && done ? \" tasksList__item--hidden\" : \"\"}`}\r\n            >\r\n                <button className={`tasksList__button ${done ? \"\" : \" tasksList__button--false\"}`}></button>\r\n                <span className={`tasksList__task ${done ? \"\" : \" tasksList__task--false\"}`}>\r\n                    {name}\r\n                </span>\r\n                <button className=\"tasksList__button tasksList__button--deleteButton\"></button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Buttons = ({ tasks, hiding }) => (\r\n    <div className=\"section__buttonContainer\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button className={`section__button${tasks.length > 0 ? \"\" : \" tasksList--hidden\"}`}>\r\n                    {hiding ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n                </button>\r\n                <button disabled={tasks.every(({ done }) => done)} className={`section__button${tasks.length > 0 ? \"\" : \" tasksList--hidden\"}`}>\r\n                    Ukończ wszystkie\r\n                </button>\r\n            </>\r\n        )}\r\n    </div>\r\n\r\n);\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n<div className=\"section\">\r\n        <div className=\"section__container\">\r\n          <h2 className=\"section__h2\">{title}</h2>\r\n          {extraHeaderContent}\r\n        </div>\r\n        {body}\r\n      </div>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <h1 className=\"header\">{title}</h1>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\n\r\nexport default Container;","import React from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nconst tasks = [\n  { id: 1, name: \"a\", done: false },\n  { id: 2, name: \"b\", done: true },\n];\n\nconst hiding = false;\n\nfunction App() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n      title=\"Dodaj nowe zadanie\"\n      body={<Form />}\n      />\n\n      <Section\n      title=\"Lista zadań\"\n      body={<Tasks tasks={tasks} hiding={hiding} />}\n      extraHeaderContent={<Buttons tasks={tasks} hiding={hiding} />}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}